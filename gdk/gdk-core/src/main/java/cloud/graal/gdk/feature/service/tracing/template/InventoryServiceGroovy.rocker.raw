@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import groovy.transform.CompileStatic
import io.micronaut.tracing.annotation.NewSpan
import io.micronaut.tracing.annotation.SpanTag
import io.opentelemetry.api.trace.Span
import io.opentelemetry.api.trace.Tracer
import jakarta.inject.Singleton

import java.util.concurrent.ConcurrentHashMap

@@CompileStatic
@@Singleton
class InventoryService {

    private static final String storeName = 'my_store'

    private final Tracer tracer
    private final WarehouseClient warehouse
    private final Map<String, Integer> inventory = new ConcurrentHashMap<>()

    InventoryService(Tracer tracer, WarehouseClient warehouse) { // <1>
        this.tracer = tracer
        this.warehouse = warehouse

        inventory.laptop = 4
        inventory.desktop = 2
        inventory.monitor = 11
    }

    Collection<String> getProductNames() {
        return inventory.keySet()
    }

    @@NewSpan('stock-counts') // <2>
    Map<String, Integer> getStockCounts(@@SpanTag('inventory.item') String item) { // <3>
        Map<String, Integer> counts = [:]
        if (inventory.containsKey(item)) {
            int count = inventory[item]
            counts.store = count

            if (count < 10) {
                counts.warehouse = inWarehouse(storeName, item)
            }
        }

        return counts
    }

    private int inWarehouse(String store, String item) {
        Span.current().setAttribute('inventory.store-name', store) // <4>

        return warehouse.getItemCount(store, getUPC(item))
    }

    void order(String item, int count) {
        orderFromWarehouse(item, count)
        if (inventory.containsKey(item)) {
            count += inventory.get(item)
        }
        inventory[item] = count
    }

    private void orderFromWarehouse(String item, int count) {
        Span span = tracer.spanBuilder('warehouse-order') // <5>
                .setAttribute('item', item)
                .setAttribute('count', count)
                .startSpan()

        warehouse.order([
                store: storeName,
                product: item,
                amount: count,
                upc: getUPC(item)])

        span.end()
    }

    private int getUPC(String item) {
        return Math.abs(item.hashCode())
    }
}
