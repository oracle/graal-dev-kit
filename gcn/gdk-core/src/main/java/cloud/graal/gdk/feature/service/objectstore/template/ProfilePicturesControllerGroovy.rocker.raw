@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.MutableHttpResponse
import io.micronaut.http.annotation.Controller
import io.micronaut.http.multipart.CompletedFileUpload
import io.micronaut.http.server.types.files.StreamedFile
import io.micronaut.http.server.util.HttpHostResolver
import io.micronaut.http.uri.UriBuilder
import io.micronaut.objectstorage.ObjectStorageEntry
import io.micronaut.objectstorage.ObjectStorageOperations
import io.micronaut.objectstorage.request.UploadRequest
import io.micronaut.objectstorage.response.UploadResponse
import io.micronaut.scheduling.TaskExecutors
import io.micronaut.scheduling.annotation.ExecuteOn

import static io.micronaut.http.HttpHeaders.ETAG
import static io.micronaut.http.MediaType.IMAGE_JPEG_TYPE

@@Controller(ProfilePicturesController.PREFIX)
@@ExecuteOn(TaskExecutors.IO)
class ProfilePicturesController implements ProfilePicturesApi {

    static final String PREFIX = '/pictures'

    private final ObjectStorageOperations<?, ?, ?> objectStorage
    private final HttpHostResolver httpHostResolver

    ProfilePicturesController(ObjectStorageOperations<?, ?, ?> objectStorage,
                              HttpHostResolver httpHostResolver) {
        this.objectStorage = objectStorage
        this.httpHostResolver = httpHostResolver
    }

    @@Override
    HttpResponse<?> upload(CompletedFileUpload fileUpload,
                           String userId,
                           HttpRequest<?> request) {
        String key = buildKey(userId)
        UploadRequest objectStorageUpload = UploadRequest.fromCompletedFileUpload(fileUpload, key)
        UploadResponse<?> response = objectStorage.upload(objectStorageUpload)

        return HttpResponse
                .created(location(request, userId))
                .header(ETAG, response.getETag())
    }

    private static String buildKey(String userId) {
        return userId + '.jpg'
    }

    private URI location(HttpRequest<?> request, String userId) {
        return UriBuilder.of(httpHostResolver.resolve(request))
                .path(PREFIX)
                .path(userId)
                .build()
    }

    @@Override
    Optional<HttpResponse<StreamedFile>> download(String userId) {
        String key = buildKey(userId)
        return objectStorage.retrieve(key)
                .map(ProfilePicturesController::buildStreamedFile)
    }

    private static HttpResponse<StreamedFile> buildStreamedFile(ObjectStorageEntry<?> entry) {
        StreamedFile file = new StreamedFile(entry.getInputStream(), IMAGE_JPEG_TYPE).attach(entry.getKey())
        MutableHttpResponse<Object> httpResponse = HttpResponse.ok()
        file.process(httpResponse)
        return httpResponse.body(file)
    }

    @@Override
    void delete(String userId) {
        String key = buildKey(userId)
        objectStorage.delete(key)
    }
}
