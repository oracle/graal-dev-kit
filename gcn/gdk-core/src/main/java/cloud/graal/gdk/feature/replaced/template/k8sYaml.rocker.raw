@import io.micronaut.starter.application.Project
@import cloud.graal.gdk.model.GdkCloud
@import static cloud.graal.gdk.model.GdkCloud.OCI
@import static cloud.graal.gdk.model.GdkCloud.NONE

@args (
Project project, String image, GdkCloud cloud
)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "@project.getName()"
spec:
  selector:
    matchLabels:
      app: "@project.getName()"
  template:
    metadata:
      labels:
        app: "@project.getName()"
    spec:
      containers:
        - name: "@project.getName()"
          image: "@image"
          @if (cloud == NONE) {
          imagePullPolicy: Never
          } else {
          imagePullPolicy: Always
          }
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 3
            failureThreshold: 10
        @if (cloud != NONE) {
          env:
          - name: MICRONAUT_ENVIRONMENTS
            value: "@cloud.getEnvironmentName()"
        }
---
apiVersion: v1
kind: Service
metadata:
  name: "@project.getName()"
  @if (cloud == OCI) {
  annotations:
    oci.oraclecloud.com/load-balancer-type: "lb"
    service.beta.kubernetes.io/oci-load-balancer-shape: "flexible"
    service.beta.kubernetes.io/oci-load-balancer-shape-flex-min: "10"
    service.beta.kubernetes.io/oci-load-balancer-shape-flex-max: "10"
  }
spec:
  selector:
    app: "@project.getName()"
  type: LoadBalancer
  ports:
    - protocol: "TCP"
      port: 8080
