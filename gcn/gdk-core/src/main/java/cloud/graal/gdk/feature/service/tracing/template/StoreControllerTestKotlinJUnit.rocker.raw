@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import io.micronaut.core.type.Argument
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpStatus.CREATED
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import jakarta.inject.Inject
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertNull
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test

@@MicronautTest
class StoreControllerTest {

    @@Inject
    @@field:Client("/store")
    lateinit var client: HttpClient

    @@Test
    fun testInventoryItem() {
        val request = HttpRequest.GET<Any>("/inventory/laptop")
        val inventory = client.toBlocking().retrieve(request, Map::class.java)

        assertNotNull(inventory)
        assertEquals("laptop", inventory["item"])
        assertEquals(4, inventory["store"])
        assertNotNull(inventory["warehouse"])
    }

    @@Test
    fun testInventoryItemNotFound() {
        val inventory = client.toBlocking().retrieve("/inventory/chair", Map::class.java)

        assertNotNull(inventory)
        assertEquals("chair", inventory["item"])
        assertEquals("Not available at store", inventory["note"])
    }

    @@Test
    fun testInventoryAll() {
        val request = HttpRequest.GET<Any>("/inventory")
        val inventory = client.toBlocking().retrieve(request, Argument.listOf(Map::class.java))

        assertNotNull(inventory)
        assertEquals(3, inventory.size)

        val names = inventory.map{ it["item"] } as List<String>
        assertTrue(names.containsAll(listOf("desktop", "monitor", "laptop")))
    }

    @@Test
    fun testOrder() {
        val item = mapOf("item" to "desktop", "count" to 8)
        val request = HttpRequest.POST<Any>("/order", item)
        val response = client.toBlocking().exchange<Any, Any>(request)

        assertEquals(CREATED, response.status)

        val inventory = client.toBlocking().retrieve("/inventory/desktop", Map::class.java)

        assertNotNull(inventory)
        assertEquals("desktop", inventory["item"])
        assertEquals(10, inventory["store"])
        assertNull(inventory["warehouse"])
    }
}
