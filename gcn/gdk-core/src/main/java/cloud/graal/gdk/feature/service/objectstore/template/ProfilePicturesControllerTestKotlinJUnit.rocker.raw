@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import io.micronaut.http.HttpHeaders.ETAG
import io.micronaut.http.HttpHeaders.LOCATION
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpStatus.CREATED
import io.micronaut.http.HttpStatus.NO_CONTENT
import io.micronaut.http.HttpStatus.OK
import io.micronaut.http.MediaType.MULTIPART_FORM_DATA_TYPE
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.http.client.multipart.MultipartBody
import io.micronaut.objectstorage.ObjectStorageEntry
import io.micronaut.objectstorage.ObjectStorageOperations
import io.micronaut.test.annotation.MockBean
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import jakarta.inject.Inject
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import java.util.Optional

@@MicronautTest
class ProfilePicturesControllerTest(
    @@Client(ProfilePicturesController.PREFIX) private val client: HttpClient
) {

    @@Inject
    lateinit var objectStorageOperations: ObjectStorageOperations<*, *, *>

    @@MockBean(ObjectStorageOperations::class)
    fun objectStorageOperations() = mockk<ObjectStorageOperations<*, *, *>>(relaxed = true)

    @@Test
    fun `upload test`() {

        every { objectStorageOperations.upload(any()) } returns mockk {
            every { eTag } returns "etag"
        }

        val body = MultipartBody.builder()
            .addPart(
                "fileUpload",
                "picture.jpg",
                "picture".toByteArray()
            )

        val request = HttpRequest.POST("/avatar", body)
            .contentType(MULTIPART_FORM_DATA_TYPE)

        val response = client.toBlocking().exchange<MultipartBody.Builder, Any>(request)

        assertEquals(CREATED, response.status())
        response.header(LOCATION)?.let { assertTrue(it.endsWith("/pictures/avatar")) }
        assertEquals("etag", response.header(ETAG))
    }

    @@Test
    fun `download test`() {
        every { objectStorageOperations.retrieve<ObjectStorageEntry<*>>("avatar.jpg") } returns Optional.of(
            mockk(relaxed = true) { every { inputStream } returns "pictures".byteInputStream() }
        )

        val response = client.toBlocking().exchange<Any>("/avatar")

        assertEquals(OK, response.status())
        verify { objectStorageOperations.retrieve<ObjectStorageEntry<*>>("avatar.jpg") }
    }

    @@Test
    fun `delete test`() {
        val response = client.toBlocking().exchange<Any, Any>(HttpRequest.DELETE("/avatar"))

        assertEquals(NO_CONTENT, response.status())
        verify { objectStorageOperations.delete("avatar.jpg") }
    }
}
