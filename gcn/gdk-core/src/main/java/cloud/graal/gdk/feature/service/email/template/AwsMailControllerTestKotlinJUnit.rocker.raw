@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import io.micronaut.context.BeanContext
import io.micronaut.context.annotation.Property
import io.micronaut.core.util.CollectionUtils
import io.micronaut.email.AsyncTransactionalEmailSender
import io.micronaut.email.BodyType.HTML
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.HttpStatus.ACCEPTED
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import jakarta.inject.Inject
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test

@@Property(name = "spec.name", value = "MailControllerTest")
@@Property(name = "micronaut.email.from.email", value = "mo@@gdk.example")
@@MicronautTest
class MailControllerTest {

    @@Inject
    @@field:Client("/")
    lateinit var httpClient: HttpClient

    @@Inject
    lateinit var beanContext: BeanContext

    @@Test
    fun mailSendEndpointSendsAnEmail() {

        val response: HttpResponse<*> = httpClient.toBlocking().exchange<Map<String, String>, Any>(
            HttpRequest.POST("/mail/send", mapOf("to" to "jo@@gdk.example")))
        assertEquals(ACCEPTED, response.status())

        val sender = beanContext.getBean(AsyncTransactionalEmailSender::class.java)
        assertTrue(sender is EmailSenderReplacement)

        val sendgridSender = sender as EmailSenderReplacement
        assertTrue(CollectionUtils.isNotEmpty(sendgridSender.emails as Collection<*>?))
        assertEquals(1, sendgridSender.emails.size)

        val email = sendgridSender.emails[0]
        assertEquals("mo@@gdk.example", email.from.email)
        assertNotNull(email.to)
        assertTrue(email.to.stream().findFirst().isPresent)
        assertEquals("jo@@gdk.example", email.to.stream().findFirst().get().email)
        assertEquals("Sending email with Amazon SES is Fun", email.subject)
        assertNotNull(email.body)
        assertTrue(email.body[HTML].isPresent)
        assertEquals("and <em>easy</em> to do anywhere with <strong>Micronaut Email</strong>", email.body[HTML].get())
    }
}
