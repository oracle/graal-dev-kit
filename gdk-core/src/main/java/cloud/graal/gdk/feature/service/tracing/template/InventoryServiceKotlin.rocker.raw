@import io.micronaut.starter.application.Project
@args (Project project)

@if (project.getPackageName() != null) {
package @(project.getPackageName())

}
import io.micronaut.tracing.annotation.NewSpan
import io.micronaut.tracing.annotation.SpanTag
import io.opentelemetry.api.trace.Span
import io.opentelemetry.api.trace.Tracer
import jakarta.inject.Singleton
import java.util.concurrent.ConcurrentHashMap

@@Singleton
class InventoryService constructor(private val tracer: Tracer,
                                   private val warehouse: WarehouseClient) { // <1>

    private val inventory: MutableMap<String, Int> = ConcurrentHashMap()

    init {
        inventory["laptop"] = 4
        inventory["desktop"] = 2
        inventory["monitor"] = 11
    }

    val productNames: Collection<String>
        get() = inventory.keys

    @@NewSpan("stock-counts") // <2>
    fun getStockCounts(@@SpanTag("inventory.item") item: String): Map<String, Int> { // <3>
        val counts = mutableMapOf<String, Int>()
        if (inventory.containsKey(item)) {
            val count = inventory[item]!!
            counts["store"] = count

            if (count < 10) {
                counts["warehouse"] = inWarehouse(storeName, item)
            }
        }

        return counts
    }

    private fun inWarehouse(store: String, item: String): Int {
        Span.current().setAttribute("inventory.store-name", store) // <4>

        return warehouse.getItemCount(store, getUPC(item))
    }

    fun order(item: String, count: Int) {
        var count = count
        orderFromWarehouse(item, count)
        if (inventory.containsKey(item)) {
            count += inventory[item]!!
        }
        inventory[item] = count
    }

    private fun orderFromWarehouse(item: String, count: Int) {
        val span = tracer.spanBuilder("warehouse-order") // <5>
            .setAttribute("item", item)
            .setAttribute("count", count.toLong())
            .startSpan()

        warehouse.order(mapOf(
                "store" to storeName,
                "product" to item,
                "amount" to count,
                "upc" to getUPC(item)))

        span.end()
    }

    private fun getUPC(item: String): Int = Math.abs(item.hashCode())

    companion object {
        private const val storeName = "my_store"
    }
}
